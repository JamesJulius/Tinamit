# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Julien Malard, محمّد اظہر انعام بیگ
# This file is distributed under the same license as the tinamit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# Julien Malard <julien.malard@mail.mcgill.ca>, 2017. #zanata
msgid ""
msgstr ""
"Project-Id-Version: tinamit 1.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-12-05 12:43-0500\n"
"PO-Revision-Date: 2017-12-14 11:24-0500\n"
"Last-Translator: Copied by Zanata <copied-by-zanata@zanata.org>\n"
"Language-Team: Dutch (https://www.transifex.com/qatikon/teams/70565/nl/)\n"
"Language: nl\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Generator: Zanata 3.9.6\n"

#: ../../source/uso/IPA.rst:4
msgid "IPA"
msgstr ""

#: ../../source/uso/IPA.rst:5
msgid ""
"El IPA (interfaz de programación de aplicaciones) permite conectar modelos "
"de manera rápida, flexible, y reproducible. Tiene las mismas funciones que "
"el IGU, pero por ser una librería Python ya puedes automatizar el proceso. "
"Si prefieres escribir líneas de código a hacer clic en botones, el IPA es "
"para ti."
msgstr ""

#: ../../source/uso/IPA.rst:10
msgid "Preparar todo"
msgstr ""

#: ../../source/uso/IPA.rst:11
msgid ""
"Antes que todo, hay que importar los objetos de Tinamït que vamos a "
"necesitar::"
msgstr ""

#: ../../source/uso/IPA.rst:15
msgid ""
"Esta línea importa la clase Conectado del módulo Conectado de Tinamït. "
"Increíblemente, es la única cosa que tenemos que importar."
msgstr ""

#: ../../source/uso/IPA.rst:18
msgid "Cargar modelos"
msgstr ""

#: ../../source/uso/IPA.rst:19
msgid ""
"Primero, vamos a empezar por crear una instancia de la clase Conectado. Si "
"no sabes lo que es una instancia de una clase, o puedes simplemente copiar "
"el texto abajo, o (mejor) puedes echarle otro vistazo a tu último curso en "
"Python. ::"
msgstr ""

#: ../../source/uso/IPA.rst:24
msgid ""
"¿Pero cómo especificamos cuáles modelos biofísico y DS querremos? Esto se "
"hace en la línea siguiente::"
msgstr ""

#: ../../source/uso/IPA.rst:28
msgid ""
":func:`~tinamit.Conectado.Conectado.estab_mds`, como probablemente "
"adivinaste, establece el modelo DS. Le tienes que dar como argumento la "
"ubicación del archivo ``.vpm`` de tu modelo DS publicado por Vensim. En el "
"futuro, si Tinamït puede aceptar modelos de otros programas que Vensim, "
"podrás poner otros tipos de archivos aquí."
msgstr ""

#: ../../source/uso/IPA.rst:32
msgid ""
"Y, para el modelo biofísico, especificamos la ubicación de la envoltura "
"específica para el modelo biofísico que querremos usar. En este caso, vamos "
"a usar SAHYSMOD, un modelo de flujos de agua subterránea y de salinidad. "
"Esto no cambia mucho; cada vez que quieres conectar un modelo DS con un "
"modelo en SAHYSMOD darás la misma envoltura, no importe cuáles variables "
"estás conectando.::"
msgstr ""

#: ../../source/uso/IPA.rst:38
msgid ""
"(No te preocupes por lo del ``os.path.split(__file__)[0]``, es simplemente "
"una manera en Python de obtener la dirección en tu computadora del "
"directorio actual. Esto le permite al programa encontrar la envoltura para "
"el modelo biofísico, no importe dónde lo guardará alguién en su computadora)"
msgstr ""

#: ../../source/uso/IPA.rst:43
msgid "Conectar Variables"
msgstr ""

#: ../../source/uso/IPA.rst:44
msgid ""
"Ahora, vamos a conectar los dos modelos por crear enlaces entre los "
"variables de cada uno. Cada conexión entre dos variables necesita 3 cosas: "
"los nombres de los dos variables para conectar y la dirección de la conexión"
" (es dec ir, de cuál modelo sacas el valor del variable para ponerlo en el "
"otro modelo). Una simulación verdaderamente dinámica incluirá conexiones en "
"ambas direcciones (del modelo DS al biofísico y viceversa).::"
msgstr ""

#: ../../source/uso/IPA.rst:51
msgid ""
"``var_mds`` es el nombre del variable en el modelo DS, y ``var_bf`` es el "
"nombre del variable en el modelo biofísico (tal como especificado en la "
"envoltura). ``mds_fuente`` indica si se lee el valor del variable en el "
"modelo DS para transferirla al modelo biofísico, o si es al revés. En este "
"ejemplo, tomamos el valor de la salinidad del suelo del modelo SAHYSMOD y lo"
" pasamos al modelo DS (Vensim)."
msgstr ""

#: ../../source/uso/IPA.rst:56
msgid ""
"Opcionalmente, puedes especificar el parámetro ``conv``, un factor de "
"conversión (si los dos variables tienen unidades distintas). Puedes conectar"
" tantos variables como quieras. En nuestro ejemplo de SAHYSMOD que viene con"
" Tinamït, conectamos un total de 8 variables."
msgstr ""

#: ../../source/uso/IPA.rst:61
msgid "Simular"
msgstr ""

#: ../../source/uso/IPA.rst:62
msgid "Ya, por fin, podemos simular el modelo::"
msgstr ""

#: ../../source/uso/IPA.rst:66
msgid ""
"``paso`` indica el intervalo de tiempo al cual se intercambian valores de "
"variables entre los dos modelos. ``tiempo_final`` indica la duración de la "
"simulación, y ``nombre_simul`` es el nombre de la simulación que se dará al "
"archivo con los egresos (resultados) de la simulación."
msgstr ""

#: ../../source/uso/IPA.rst:71
msgid "Implementación de políticas"
msgstr ""

#: ../../source/uso/IPA.rst:72
msgid ""
"Los que conocen los modelos de dinámicas de los sistemas sabrán que muchas "
"veces se incorporan opciones de acciones o de políticas en los modelos con "
"un variable “sí o no.” Por ejemplo, en nuestro modelo de salinidad de los "
"suelos tenemos un variable llamado “Política de recuperación de aguas.” Si "
"este variable es igual a 1, activará la parte del modelo de dinámicas de los"
" sistemas para una política de recuperación de aguas. Si es igual a 0, no "
"habrá intervención en la simulación. Estas cosas son muy útiles para "
"comprobar la eficacidad (o no) de varias ideas de intervenciones en el "
"sistema."
msgstr ""

#: ../../source/uso/IPA.rst:78
msgid ""
"El asunto es que nosotros nos aburrimos muy rápido de tener que cambiar los "
"valores de estos variables en el modelo Vensim y tener que volver a "
"publicarlo cada vez que querríamos analizar una combinación diferente de "
"políticas. Con 5 posibilidades de políticas distintas en nuestro modelo "
"ejemplo, ¡acabamos con muchas combinaciones y permutaciones!"
msgstr ""

#: ../../source/uso/IPA.rst:82
msgid ""
"Así que no se preocupen, ya incluimos una función en el IPA que les permite "
"activar o desactivar una política en particular si tener que abrir Vensim y "
"republicar el modelo para cada cambio. Actualmente, puedes emplear esta "
"función para cambiar el valor de cualquier variable en el modelo antes de "
"empezar la simulación, pero es más útil que todo para activar y desactivar "
"políticas. (¡Cuidado! Esta función solamente cambia el valor inicial del "
"variable.)::"
msgstr ""

#: ../../source/uso/IPA.rst:89
msgid ""
"``modelo.mds`` accede el objeto de modelo DS asociado con el modelo "
"conectado, y la función :func:`~tinamit.Modelo.Modelo.inic_val_var`` hace "
"exactamente lo que piensas que hace."
msgstr ""

#: ../../source/uso/IPA.rst:93
msgid "Resumen"
msgstr ""

#: ../../source/uso/IPA.rst:94
msgid ""
"Y bueno, allí está. Ya puedes conectar, desconectar, simular y manipular "
"modelos. Mira el documento “Ejemplo SAHYSMOD” en el directorio de ejemplos "
"de Tinamït para un ejemplo del uso del IPA en la automatización de corridas "
"para simular, de una vez, 5 corridas de un modelo socioeconómico DS con un "
"modelo biofísico de calidad y salinidad de los suelos (SAHYSMOD)."
msgstr ""

#: ../../source/uso/IPA.rst:98
msgid ""
"Para las que conocen las funciones :py:mod:`threading` de Python, y que "
"piensan que sería una manera brillante de correr las 5 simulaciones en "
"paralelo para ahorrar tiempo, no lo hagan. Pensamos lo mismo y cuando lo "
"intentamos sucede que el DLL de Vensim no puede correr más que un modelo al "
"mismo tiempo y se pone en un gran lío. Si no tienes ni idea de lo que estoy "
"diciendo, perfecto."
msgstr ""
